#!/bin/bash

echo "üéÆ Iniciando Torre de los Pecados..."
echo "======================================"

# Verificar si los puertos est√°n disponibles
check_port() {
    if lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null ; then
        echo "‚úÖ Puerto $1 disponible"
        return 0
    else
        echo "‚ùå Puerto $1 ocupado"
        return 1
    fi
}

# Verificar puertos
echo "üîç Verificando puertos..."
check_port 3000 || echo "‚ö†Ô∏è  El puerto 3000 (frontend) est√° ocupado"
check_port 5001 || echo "‚ö†Ô∏è  El puerto 5001 (backend) est√° ocupado"

echo ""
echo "üöÄ Iniciando servidores..."
echo ""

# Iniciar backend en background
echo "üì° Iniciando backend (puerto 5001)..."
cd api && npm run dev > ../backend.log 2>&1 &
BACKEND_PID=$!

# Esperar un momento para que el backend se inicie
sleep 3

# Verificar si el backend est√° funcionando
if curl -s http://localhost:5001/health > /dev/null; then
    echo "‚úÖ Backend funcionando correctamente"
else
    echo "‚ùå Error iniciando el backend"
    kill $BACKEND_PID 2>/dev/null
    exit 1
fi

# Iniciar frontend en background
echo "üåê Iniciando frontend (puerto 3000)..."
cd ../web && npm run dev > ../frontend.log 2>&1 &
FRONTEND_PID=$!

# Esperar un momento para que el frontend se inicie
sleep 5

# Verificar si el frontend est√° funcionando
if curl -s http://localhost:3000 > /dev/null; then
    echo "‚úÖ Frontend funcionando correctamente"
else
    echo "‚ùå Error iniciando el frontend"
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
    exit 1
fi

echo ""
echo "üéâ ¬°Proyecto iniciado correctamente!"
echo "======================================"
echo ""
echo "üì± Frontend: http://localhost:3000"
echo "üéÆ P√°gina del juego: http://localhost:3000/game"
echo "üì° Backend API: http://localhost:5001"
echo "üîç Health check: http://localhost:5001/health"
echo ""
echo "üìã Logs:"
echo "   Backend:  tail -f backend.log"
echo "   Frontend: tail -f frontend.log"
echo ""
echo "üõë Para detener: Ctrl+C"
echo ""

# Funci√≥n para limpiar al salir
cleanup() {
    echo ""
    echo "üõë Deteniendo servidores..."
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
    echo "‚úÖ Servidores detenidos"
    exit 0
}

# Capturar Ctrl+C
trap cleanup SIGINT

# Mantener el script corriendo
wait

echo "üîß Verificando configuraci√≥n de workflows..."

# Verificar si el monitoreo est√° deshabilitado para desarrollo
if grep -q "#    - cron: '0 \* \* \* \*'" .github/workflows/monitoring.yml; then
    echo "‚úÖ Monitoreo autom√°tico deshabilitado (correcto para desarrollo)"
else
    echo "‚ö†Ô∏è  Monitoreo autom√°tico habilitado - considera deshabilitarlo para desarrollo:"
    echo "   ./scripts/manage-workflows.sh disable-monitoring"
fi

# Verificar si CodeQL est√° deshabilitado para desarrollo
if grep -q "#    - cron: '0 3 \* \* 0'" .github/workflows/codeql-analysis.yml; then
    echo "‚úÖ CodeQL autom√°tico deshabilitado (correcto para desarrollo)"
else
    echo "‚ö†Ô∏è  CodeQL autom√°tico habilitado - considera deshabilitarlo para desarrollo:"
    echo "   ./scripts/manage-workflows.sh disable-codeql"
fi
