{"version":3,"names":["cov_5bftxeav9","actualCoverage","v4","uuidv4","s","require","Game","THEMATIC_DECKS","ValidationService","DeckConfigurationService","ChatService","GameService","constructor","io","f","games","Map","playerSockets","playerReconnectionTokens","disconnectedPlayers","playerTimeouts","validationService","deckConfigurationService","chatService","invitationCodes","roomInvitations","TURN_TIMEOUT","RECONNECTION_TIMEOUT","INACTIVE_TIMEOUT","INVITATION_EXPIRY","createReconnectionToken","playerId","roomId","token","expiresAt","Date","now","set","setTimeout","delete","validateReconnectionToken","tokenData","get","b","handleReconnection","socket","data","Error","game","player","getPlayer","socketId","id","join","timeoutId","clearTimeout","emit","gameState","getGameState","message","to","playerName","name","console","log","error","startInactivityTimeout","handlePlayerInactivity","removePlayer","validateGameState","players","length","endGame","currentPlayerIndex","turnStartTime","timeSinceTurnStart","getTime","currentPlayer","nextTurn","createRoom","maxPlayers","deckType","ANGELS","addPlayer","joinRoom","getPublicInfo","playCard","cardIndex","targetPlayerId","playerInfo","validation","validatePlay","isValid","errors","warnings","playableCards","card","wasPurified","towerOfSins","cards","lastPlayedCard","forEach","turnInfo","getTurnInfo","previousPlayerId","nextPlayerId","winner","sinner","gameSummary","totalTurns","turnNumber","finalDiscardPileSize","discardPile","playersStatus","map","p","status","hasWon","isSinner","cardsRemaining","getTotalCardsRemaining","score","takeDiscardPile","cardCount","setPlayerReady","isReady","find","allReady","every","startGame","getPlayableCards","validationInfo","getValidationInfo","canPlay","currentPhase","handSize","faceUpSize","faceDownSize","soulWellSize","isCurrentTurn","nextPlayerCanPlayAnything","discardPileSize","shouldTakeDiscardPile","handleDisconnect","disconnectedAt","reconnectionToken","isDisconnected","getPublicRooms","publicRooms","push","getGameStats","stats","totalGames","activeGames","waitingGames","finishedGames","totalPlayers","deckTypes","angels","demons","dragons","mages","roomName","slice","playerCount","createdAt","hostName","isPrivate","hasPassword","lastActivity","sort","a","getRoomInfo","isHost","searchRooms","criteria","minPlayers","rooms","filter","room","undefined","toLowerCase","includes","generateInvitationCode","createdBy","options","maxUses","expiresIn","code","generateUniqueCode","invitation","currentUses","isActive","has","Set","add","cleanupExpiredInvitation","chars","i","charAt","Math","floor","random","validateInvitationCode","roomInfo","useInvitationCode","success","getRoomInvitations","codes","invitations","deactivateInvitationCode","deactivatedBy","host","roomCodes","size","cleanupAllExpiredInvitations","expiredCodes","getDeckConfigurations","getAllDefaultConfigurations","getEnabledDeckConfigurations","getEnabledConfigurations","getDeckConfiguration","getDefaultConfiguration","createRoomDeckConfiguration","customizations","createRoomConfiguration","getRoomDeckConfiguration","getRoomConfiguration","updateRoomDeckConfiguration","updates","updateRoomConfiguration","modifyDeckCard","cardId","modifications","modifyCard","addDeckCustomRule","rule","addCustomRule","removeDeckCustomRule","ruleId","removeCustomRule","getConfiguredDeck","validateDeckConfiguration","configuration","validateConfiguration","getDeckConfigurationStats","getConfigurationStats","exportDeckConfiguration","exportConfiguration","importDeckConfiguration","importedConfig","importConfiguration","createChatRoom","joinChatRoom","userId","userInfo","leaveChatRoom","sendChatMessage","messageData","sendMessage","getChatMessages","getMessages","editChatMessage","messageId","newContent","editMessage","deleteChatMessage","isModerator","deleteMessage","getChatRoomUsers","getRoomUsers","getUserChatRooms","searchChatMessages","query","searchMessages","updateChatRoomSettings","settings","updateRoomSettings","addChatModerator","addedBy","addModerator","removeChatModerator","removedBy","removeModerator","getChatStats","validationStats","getValidationStats","gameStats","cleanupOldGames","oneHourAgo","fiveMinutesAgo","disconnectData","endTime","module","exports"],"sources":["GameService.js"],"sourcesContent":["const { v4: uuidv4 } = require('uuid');\nconst Game = require('../models/Game');\nconst { THEMATIC_DECKS } = require('../models/Card');\nconst ValidationService = require('./ValidationService');\nconst DeckConfigurationService = require('./DeckConfigurationService');\nconst ChatService = require('./ChatService');\n\nclass GameService {\n  constructor(io) {\n    this.io = io;\n    this.games = new Map(); // Map<roomId, Game>\n    this.playerSockets = new Map(); // Map<socketId, {playerId, roomId}>\n    this.playerReconnectionTokens = new Map(); // Map<playerId, {token, expiresAt, roomId}>\n    this.disconnectedPlayers = new Map(); // Map<playerId, {roomId, disconnectedAt, gameState}>\n    this.playerTimeouts = new Map(); // Map<playerId, timeoutId>\n    this.validationService = new ValidationService();\n    this.deckConfigurationService = new DeckConfigurationService();\n    this.chatService = new ChatService();\n    \n    // Sistema de invitaciones\n    this.invitationCodes = new Map(); // Map<code, {roomId, createdBy, createdAt, expiresAt, maxUses, currentUses}>\n    this.roomInvitations = new Map(); // Map<roomId, Set<code>>\n    \n    // Configuración de timeouts\n    this.TURN_TIMEOUT = 30000; // 30 segundos por turno\n    this.RECONNECTION_TIMEOUT = 60000; // 1 minuto para reconexión\n    this.INACTIVE_TIMEOUT = 120000; // 2 minutos de inactividad\n    this.INVITATION_EXPIRY = 24 * 60 * 60 * 1000; // 24 horas para invitaciones\n  }\n\n  // Crear token de reconexión\n  createReconnectionToken(playerId, roomId) {\n    const token = uuidv4();\n    const expiresAt = new Date(Date.now() + this.RECONNECTION_TIMEOUT);\n    \n    this.playerReconnectionTokens.set(playerId, {\n      token,\n      expiresAt,\n      roomId\n    });\n    \n    // Limpiar token expirado\n    setTimeout(() => {\n      this.playerReconnectionTokens.delete(playerId);\n    }, this.RECONNECTION_TIMEOUT);\n    \n    return token;\n  }\n\n  // Validar token de reconexión\n  validateReconnectionToken(playerId, token) {\n    const tokenData = this.playerReconnectionTokens.get(playerId);\n    \n    if (!tokenData || tokenData.token !== token) {\n      return false;\n    }\n    \n    if (new Date() > tokenData.expiresAt) {\n      this.playerReconnectionTokens.delete(playerId);\n      return false;\n    }\n    \n    return tokenData.roomId;\n  }\n\n  // Manejar reconexión de jugador\n  handleReconnection(socket, data) {\n    try {\n      const { playerId, token } = data;\n      const roomId = this.validateReconnectionToken(playerId, token);\n      \n      if (!roomId) {\n        throw new Error('Token de reconexión inválido o expirado');\n      }\n      \n      const game = this.games.get(roomId);\n      if (!game) {\n        throw new Error('Juego no encontrado');\n      }\n      \n      const player = game.getPlayer(playerId);\n      if (!player) {\n        throw new Error('Jugador no encontrado en el juego');\n      }\n      \n      // Actualizar socket del jugador\n      player.socketId = socket.id;\n      this.playerSockets.set(socket.id, { playerId, roomId });\n      \n      // Unir socket a la sala\n      socket.join(roomId);\n      \n      // Limpiar datos de desconexión\n      this.disconnectedPlayers.delete(playerId);\n      this.playerReconnectionTokens.delete(playerId);\n      \n      // Cancelar timeout de inactividad\n      const timeoutId = this.playerTimeouts.get(playerId);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        this.playerTimeouts.delete(playerId);\n      }\n      \n      // Notificar reconexión exitosa\n      socket.emit('reconnectionSuccess', {\n        gameState: game.getGameState(playerId),\n        message: 'Reconexión exitosa'\n      });\n      \n      // Notificar a otros jugadores\n      socket.to(roomId).emit('playerReconnected', {\n        playerId,\n        playerName: player.name\n      });\n      \n      console.log(`✅ ${player.name} se reconectó a la sala ${roomId}`);\n      \n    } catch (error) {\n      socket.emit('reconnectionFailed', { message: error.message });\n    }\n  }\n\n  // Iniciar timeout de inactividad para un jugador\n  startInactivityTimeout(playerId, roomId) {\n    const timeoutId = setTimeout(() => {\n      this.handlePlayerInactivity(playerId, roomId);\n    }, this.INACTIVE_TIMEOUT);\n    \n    this.playerTimeouts.set(playerId, timeoutId);\n  }\n\n  // Manejar inactividad del jugador\n  handlePlayerInactivity(playerId, roomId) {\n    const game = this.games.get(roomId);\n    if (!game) return;\n    \n    const player = game.getPlayer(playerId);\n    if (!player) return;\n    \n    console.log(`⏰ Jugador ${player.name} inactivo, removiendo del juego`);\n    \n    // Remover jugador del juego\n    game.removePlayer(playerId);\n    \n    // Notificar a otros jugadores\n    this.io.to(roomId).emit('playerInactive', {\n      playerId,\n      playerName: player.name,\n      message: 'Jugador removido por inactividad'\n    });\n    \n    // Limpiar datos\n    this.disconnectedPlayers.delete(playerId);\n    this.playerTimeouts.delete(playerId);\n    this.playerReconnectionTokens.delete(playerId);\n    \n    // Si el juego terminó, limpiar\n    if (game.gameState === 'finished') {\n      this.games.delete(roomId);\n    }\n  }\n\n  // Validar estado del juego\n  validateGameState(roomId) {\n    const game = this.games.get(roomId);\n    if (!game) return false;\n    \n    // Verificar que haya al menos 2 jugadores\n    if (game.players.length < 2 && game.gameState === 'playing') {\n      game.endGame();\n      return false;\n    }\n    \n    // Verificar que el jugador actual exista\n    if (game.gameState === 'playing' && game.currentPlayerIndex >= game.players.length) {\n      game.currentPlayerIndex = 0;\n    }\n    \n    // Verificar timeouts de turno\n    if (game.gameState === 'playing' && game.turnStartTime) {\n      const timeSinceTurnStart = Date.now() - game.turnStartTime.getTime();\n      if (timeSinceTurnStart > this.TURN_TIMEOUT) {\n        const currentPlayer = game.players[game.currentPlayerIndex];\n        if (currentPlayer) {\n          console.log(`⏰ Timeout de turno para ${currentPlayer.name}`);\n          game.nextTurn();\n        }\n      }\n    }\n    \n    return true;\n  }\n\n  // Crear una nueva sala\n  createRoom(socket, data) {\n    try {\n      const { playerName, maxPlayers = 6, deckType = THEMATIC_DECKS.ANGELS } = data;\n      const roomId = uuidv4();\n      const playerId = uuidv4();\n\n      // Crear nuevo juego con mazo temático\n      const game = new Game(roomId, maxPlayers, deckType);\n      const player = game.addPlayer(playerId, playerName, socket.id);\n      \n      // Guardar referencias\n      this.games.set(roomId, game);\n      this.playerSockets.set(socket.id, { playerId, roomId });\n      \n      // Unir socket a la sala\n      socket.join(roomId);\n      \n      // Notificar al jugador\n      socket.emit('roomCreated', {\n        roomId,\n        playerId,\n        gameState: game.getGameState(playerId)\n      });\n\n      console.log(`Sala creada: ${roomId} por ${playerName} con mazo ${deckType}`);\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Unirse a una sala\n  joinRoom(socket, data) {\n    try {\n      const { roomId, playerName } = data;\n      const game = this.games.get(roomId);\n      \n      if (!game) {\n        throw new Error('Sala no encontrada');\n      }\n\n      const playerId = uuidv4();\n      const player = game.addPlayer(playerId, playerName, socket.id);\n      \n      // Guardar referencias\n      this.playerSockets.set(socket.id, { playerId, roomId });\n      \n      // Unir socket a la sala\n      socket.join(roomId);\n      \n      // Notificar al jugador\n      socket.emit('roomJoined', {\n        roomId,\n        playerId,\n        gameState: game.getGameState(playerId)\n      });\n\n      // Notificar a otros jugadores\n      socket.to(roomId).emit('playerJoined', {\n        player: player.getPublicInfo()\n      });\n\n      console.log(`${playerName} se unió a la sala ${roomId}`);\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Jugar carta\n  playCard(socket, data) {\n    try {\n      const { cardIndex, targetPlayerId } = data;\n      const playerInfo = this.playerSockets.get(socket.id);\n      \n      if (!playerInfo) {\n        throw new Error('Jugador no encontrado');\n      }\n\n      const { playerId, roomId } = playerInfo;\n      const game = this.games.get(roomId);\n      \n      if (!game) {\n        throw new Error('Juego no encontrado');\n      }\n\n      // Validar la jugada antes de ejecutarla\n      const validation = this.validationService.validatePlay(game, playerId, cardIndex, targetPlayerId);\n      \n      if (!validation.isValid) {\n        socket.emit('validationError', {\n          errors: validation.errors,\n          warnings: validation.warnings,\n          playableCards: validation.playableCards\n        });\n        return;\n      }\n\n      // Si hay advertencias, enviarlas al jugador\n      if (validation.warnings.length > 0) {\n        socket.emit('validationWarning', {\n          warnings: validation.warnings,\n          card: validation.card.getPublicInfo()\n        });\n      }\n\n      const card = game.playCard(playerId, cardIndex, targetPlayerId);\n      \n          // Verificar si hubo purificación\n    const wasPurified = game.towerOfSins.cards.length === 0 && game.towerOfSins.lastPlayedCard === null;\n      \n      // Notificar a todos los jugadores en la sala\n      game.players.forEach(player => {\n        const gameState = game.getGameState(player.id);\n        this.io.to(player.socketId).emit('gameStateUpdated', gameState);\n      });\n\n      // Notificar acción específica\n      this.io.to(roomId).emit('cardPlayed', {\n        playerId,\n        card: card.getPublicInfo(),\n        targetPlayerId,\n        wasPurified,\n        turnInfo: game.getTurnInfo()\n      });\n\n      // Notificar purificación si ocurrió\n      if (wasPurified) {\n        this.io.to(roomId).emit('pilePurified', {\n          playerId,\n          card: card.getPublicInfo(),\n          message: 'La Torre de los Pecados ha sido purificada'\n        });\n      }\n\n      // Notificar cambio de turno\n      this.io.to(roomId).emit('turnChanged', {\n        turnInfo: game.getTurnInfo(),\n        previousPlayerId: playerId,\n        nextPlayerId: game.players[game.currentPlayerIndex]?.id\n      });\n\n      // Verificar si el juego terminó\n      if (game.gameState === 'finished') {\n        console.log(`🎮 Juego terminado en sala ${roomId}`);\n        \n        this.io.to(roomId).emit('gameEnded', {\n          winner: game.winner ? game.winner.getPublicInfo() : null,\n          sinner: game.sinner ? game.sinner.getPublicInfo() : null,\n          gameSummary: {\n            totalTurns: game.turnNumber,\n            finalDiscardPileSize: game.discardPile.length,\n            playersStatus: game.players.map(p => ({\n              id: p.id,\n              name: p.name,\n              status: p.hasWon() ? 'winner' : p.isSinner ? 'sinner' : 'active',\n              cardsRemaining: p.getTotalCardsRemaining(),\n              score: p.score\n            }))\n          }\n        });\n      }\n\n      console.log(`Carta jugada en sala ${roomId}: ${card.name} por ${playerId}`);\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Tomar Torre de los Pecados\n  takeDiscardPile(socket) {\n    try {\n      const playerInfo = this.playerSockets.get(socket.id);\n      \n      if (!playerInfo) {\n        throw new Error('Jugador no encontrado');\n      }\n\n      const { playerId, roomId } = playerInfo;\n      const game = this.games.get(roomId);\n      \n      if (!game) {\n        throw new Error('Juego no encontrado');\n      }\n\n      game.takeDiscardPile(playerId);\n      \n      // Notificar a todos los jugadores\n      game.players.forEach(player => {\n        const gameState = game.getGameState(player.id);\n        this.io.to(player.socketId).emit('gameStateUpdated', gameState);\n      });\n\n      this.io.to(roomId).emit('discardPileTaken', {\n        playerId,\n        cardCount: game.towerOfSins.cards.length\n      });\n\n      console.log(`Jugador ${playerId} tomó la Torre de los Pecados en sala ${roomId}`);\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Marcar jugador como listo\n  setPlayerReady(socket, data) {\n    try {\n      const { isReady } = data;\n      const playerInfo = this.playerSockets.get(socket.id);\n      \n      if (!playerInfo) {\n        throw new Error('Jugador no encontrado');\n      }\n\n      const { playerId, roomId } = playerInfo;\n      const game = this.games.get(roomId);\n      \n      if (!game) {\n        throw new Error('Juego no encontrado');\n      }\n\n      const player = game.players.find(p => p.id === playerId);\n      player.isReady = isReady;\n\n      // Notificar a todos los jugadores\n      game.players.forEach(player => {\n        const gameState = game.getGameState(player.id);\n        this.io.to(player.socketId).emit('gameStateUpdated', gameState);\n      });\n\n      // Verificar si todos están listos para iniciar\n      const allReady = game.players.every(p => p.isReady);\n      if (allReady && game.players.length >= 2) {\n        this.io.to(roomId).emit('allPlayersReady');\n      }\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Iniciar juego\n  startGame(socket) {\n    try {\n      const playerInfo = this.playerSockets.get(socket.id);\n      \n      if (!playerInfo) {\n        throw new Error('Jugador no encontrado');\n      }\n\n      const { roomId } = playerInfo;\n      const game = this.games.get(roomId);\n      \n      if (!game) {\n        throw new Error('Juego no encontrado');\n      }\n\n      game.startGame();\n\n      // Notificar a todos los jugadores\n      game.players.forEach(player => {\n        const gameState = game.getGameState(player.id);\n        this.io.to(player.socketId).emit('gameStarted', gameState);\n      });\n\n      console.log(`Juego iniciado en sala ${roomId} con mazo ${game.deckType}`);\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Obtener cartas jugables\n  getPlayableCards(socket) {\n    try {\n      const playerInfo = this.playerSockets.get(socket.id);\n      \n      if (!playerInfo) {\n        throw new Error('Jugador no encontrado');\n      }\n\n      const { playerId, roomId } = playerInfo;\n      const game = this.games.get(roomId);\n      \n      if (!game) {\n        throw new Error('Juego no encontrado');\n      }\n\n      // Usar el ValidationService para obtener información completa\n      const validationInfo = this.validationService.getValidationInfo(game, playerId);\n      \n      socket.emit('playableCards', {\n        cards: validationInfo.playableCards,\n        canPlay: validationInfo.canPlay,\n        currentPhase: validationInfo.currentPhase,\n        handSize: validationInfo.handSize,\n        faceUpSize: validationInfo.faceUpSize,\n        faceDownSize: validationInfo.faceDownSize,\n        soulWellSize: validationInfo.soulWellSize,\n        isCurrentTurn: validationInfo.isCurrentTurn,\n        nextPlayerCanPlayAnything: validationInfo.nextPlayerCanPlayAnything,\n        lastPlayedCard: validationInfo.lastPlayedCard,\n        discardPileSize: validationInfo.discardPileSize,\n        shouldTakeDiscardPile: this.validationService.shouldTakeDiscardPile(game, playerId)\n      });\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Manejar desconexión\n  handleDisconnect(socket) {\n    const playerInfo = this.playerSockets.get(socket.id);\n    \n    if (playerInfo) {\n      const { playerId, roomId } = playerInfo;\n      const game = this.games.get(roomId);\n      \n      if (game) {\n        const player = game.getPlayer(playerId);\n        \n        if (player) {\n          // Guardar estado del jugador para reconexión\n          this.disconnectedPlayers.set(playerId, {\n            roomId,\n            disconnectedAt: new Date(),\n            gameState: game.gameState\n          });\n          \n          // Crear token de reconexión\n          const reconnectionToken = this.createReconnectionToken(playerId, roomId);\n          \n          // Iniciar timeout de inactividad\n          this.startInactivityTimeout(playerId, roomId);\n          \n          // Marcar jugador como desconectado pero mantenerlo en el juego\n          player.isDisconnected = true;\n          player.socketId = null;\n          \n          // Notificar a otros jugadores\n          socket.to(roomId).emit('playerDisconnected', {\n            playerId,\n            playerName: player.name,\n            message: 'Jugador desconectado - puede reconectarse'\n          });\n          \n          console.log(`📡 ${player.name} desconectado de la sala ${roomId}`);\n          \n          // Validar estado del juego\n          this.validateGameState(roomId);\n        }\n      }\n      \n      this.playerSockets.delete(socket.id);\n    }\n  }\n\n  // Obtener lista de salas públicas\n  getPublicRooms() {\n    const publicRooms = [];\n    \n    for (const [roomId, game] of this.games) {\n      if (game.gameState === 'waiting') {\n        publicRooms.push(game.getPublicInfo());\n      }\n    }\n    \n    return publicRooms;\n  }\n\n  // Obtener estadísticas del juego\n  getGameStats() {\n    const stats = {\n      totalGames: 0,\n      activeGames: 0,\n      waitingGames: 0,\n      finishedGames: 0,\n      totalPlayers: 0,\n      deckTypes: {\n        angels: 0,\n        demons: 0,\n        dragons: 0,\n        mages: 0\n      }\n    };\n    \n    for (const [roomId, game] of this.games) {\n      stats.totalGames++;\n      stats.deckTypes[game.deckType]++;\n      \n      switch (game.gameState) {\n        case 'waiting':\n          stats.waitingGames++;\n          break;\n        case 'playing':\n          stats.activeGames++;\n          break;\n        case 'finished':\n          stats.finishedGames++;\n          break;\n      }\n      \n      stats.totalPlayers += game.players.length;\n    }\n    \n    return stats;\n  }\n\n  // Obtener lista de salas públicas\n  getPublicRooms() {\n    const publicRooms = [];\n    \n    for (const [roomId, game] of this.games) {\n      // Solo incluir salas que no estén llenas y no estén en juego\n      if (game.players.length < game.maxPlayers && game.gameState !== 'playing') {\n        publicRooms.push({\n          id: roomId,\n          name: game.roomName || `Sala ${roomId.slice(0, 8)}`,\n          playerCount: game.players.length,\n          maxPlayers: game.maxPlayers,\n          deckType: game.deckType,\n          status: game.gameState,\n          createdAt: game.createdAt,\n          hostName: game.players[0]?.name || 'Desconocido',\n          isPrivate: game.isPrivate || false,\n          hasPassword: game.hasPassword || false,\n          lastActivity: game.lastActivity || game.createdAt\n        });\n      }\n    }\n    \n    // Ordenar por actividad reciente\n    return publicRooms.sort((a, b) => new Date(b.lastActivity) - new Date(a.lastActivity));\n  }\n\n  // Obtener información detallada de una sala\n  getRoomInfo(roomId) {\n    const game = this.games.get(roomId);\n    if (!game) return null;\n    \n    return {\n      id: roomId,\n      name: game.roomName || `Sala ${roomId.slice(0, 8)}`,\n      playerCount: game.players.length,\n      maxPlayers: game.maxPlayers,\n      deckType: game.deckType,\n      status: game.gameState,\n      createdAt: game.createdAt,\n      hostName: game.players[0]?.name || 'Desconocido',\n      isPrivate: game.isPrivate || false,\n      hasPassword: game.hasPassword || false,\n      lastActivity: game.lastActivity || game.createdAt,\n      players: game.players.map(player => ({\n        id: player.id,\n        name: player.name,\n        isReady: player.isReady,\n        isHost: player.id === game.players[0]?.id\n      }))\n    };\n  }\n\n  // Buscar salas por criterios\n  searchRooms(criteria = {}) {\n    const { deckType, minPlayers, maxPlayers, status, hostName } = criteria;\n    let rooms = this.getPublicRooms();\n    \n    if (deckType) {\n      rooms = rooms.filter(room => room.deckType === deckType);\n    }\n    \n    if (minPlayers !== undefined) {\n      rooms = rooms.filter(room => room.playerCount >= minPlayers);\n    }\n    \n    if (maxPlayers !== undefined) {\n      rooms = rooms.filter(room => room.maxPlayers <= maxPlayers);\n    }\n    \n    if (status) {\n      rooms = rooms.filter(room => room.status === 'waiting');\n    }\n    \n    if (hostName) {\n      rooms = rooms.filter(room => \n        room.hostName.toLowerCase().includes(hostName.toLowerCase())\n      );\n    }\n    \n    return rooms;\n  }\n\n  // Sistema de invitaciones por código\n\n  // Generar código de invitación\n  generateInvitationCode(roomId, createdBy, options = {}) {\n    const { maxUses = 10, expiresIn = this.INVITATION_EXPIRY } = options;\n    \n    // Generar código único de 6 caracteres\n    const code = this.generateUniqueCode();\n    const createdAt = new Date();\n    const expiresAt = new Date(createdAt.getTime() + expiresIn);\n    \n    const invitation = {\n      roomId,\n      createdBy,\n      createdAt,\n      expiresAt,\n      maxUses,\n      currentUses: 0,\n      isActive: true\n    };\n    \n    // Guardar invitación\n    this.invitationCodes.set(code, invitation);\n    \n    // Agregar código a la sala\n    if (!this.roomInvitations.has(roomId)) {\n      this.roomInvitations.set(roomId, new Set());\n    }\n    this.roomInvitations.get(roomId).add(code);\n    \n    // Limpiar invitación expirada\n    setTimeout(() => {\n      this.cleanupExpiredInvitation(code);\n    }, expiresIn);\n    \n    return code;\n  }\n\n  // Generar código único\n  generateUniqueCode() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code;\n    do {\n      code = '';\n      for (let i = 0; i < 6; i++) {\n        code += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n    } while (this.invitationCodes.has(code));\n    \n    return code;\n  }\n\n  // Validar código de invitación\n  validateInvitationCode(code) {\n    const invitation = this.invitationCodes.get(code);\n    \n    if (!invitation) {\n      return { isValid: false, error: 'Código de invitación no encontrado' };\n    }\n    \n    if (!invitation.isActive) {\n      return { isValid: false, error: 'Código de invitación desactivado' };\n    }\n    \n    if (new Date() > invitation.expiresAt) {\n      this.cleanupExpiredInvitation(code);\n      return { isValid: false, error: 'Código de invitación expirado' };\n    }\n    \n    if (invitation.currentUses >= invitation.maxUses) {\n      return { isValid: false, error: 'Código de invitación agotado' };\n    }\n    \n    const game = this.games.get(invitation.roomId);\n    if (!game) {\n      this.cleanupExpiredInvitation(code);\n      return { isValid: false, error: 'Sala no encontrada' };\n    }\n    \n    if (game.gameState !== 'waiting') {\n      return { isValid: false, error: 'La sala ya está en juego' };\n    }\n    \n    if (game.players.length >= game.maxPlayers) {\n      return { isValid: false, error: 'La sala está llena' };\n    }\n    \n    return { \n      isValid: true, \n      invitation,\n      roomInfo: this.getRoomInfo(invitation.roomId)\n    };\n  }\n\n  // Usar código de invitación\n  useInvitationCode(code, playerName, socketId) {\n    const validation = this.validateInvitationCode(code);\n    \n    if (!validation.isValid) {\n      return { success: false, error: validation.error };\n    }\n    \n    const { invitation, roomInfo } = validation;\n    \n    try {\n      // Unir jugador a la sala\n      const playerId = uuidv4();\n      const game = this.games.get(invitation.roomId);\n      const player = game.addPlayer(playerId, playerName, socketId);\n      \n      // Incrementar uso del código\n      invitation.currentUses++;\n      \n      // Desactivar código si se agotó\n      if (invitation.currentUses >= invitation.maxUses) {\n        invitation.isActive = false;\n      }\n      \n      // Guardar referencias\n      this.playerSockets.set(socketId, { playerId, roomId: invitation.roomId });\n      \n      return {\n        success: true,\n        roomId: invitation.roomId,\n        playerId,\n        gameState: game.getGameState(playerId),\n        roomInfo\n      };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Obtener invitaciones de una sala\n  getRoomInvitations(roomId) {\n    const codes = this.roomInvitations.get(roomId) || new Set();\n    const invitations = [];\n    \n    for (const code of codes) {\n      const invitation = this.invitationCodes.get(code);\n      if (invitation && invitation.isActive) {\n        invitations.push({\n          code,\n          createdAt: invitation.createdAt,\n          expiresAt: invitation.expiresAt,\n          maxUses: invitation.maxUses,\n          currentUses: invitation.currentUses,\n          createdBy: invitation.createdBy\n        });\n      }\n    }\n    \n    return invitations;\n  }\n\n  // Desactivar código de invitación\n  deactivateInvitationCode(code, deactivatedBy) {\n    const invitation = this.invitationCodes.get(code);\n    \n    if (!invitation) {\n      return { success: false, error: 'Código no encontrado' };\n    }\n    \n    // Verificar permisos (solo el creador o anfitrión puede desactivar)\n    const game = this.games.get(invitation.roomId);\n    if (game && game.players.length > 0) {\n      const host = game.players[0];\n      if (invitation.createdBy !== deactivatedBy && host.id !== deactivatedBy) {\n        return { success: false, error: 'No tienes permisos para desactivar este código' };\n      }\n    }\n    \n    invitation.isActive = false;\n    \n    return { success: true, message: 'Código desactivado exitosamente' };\n  }\n\n  // Limpiar invitación expirada\n  cleanupExpiredInvitation(code) {\n    const invitation = this.invitationCodes.get(code);\n    if (invitation) {\n      // Remover de la sala\n      const roomCodes = this.roomInvitations.get(invitation.roomId);\n      if (roomCodes) {\n        roomCodes.delete(code);\n        if (roomCodes.size === 0) {\n          this.roomInvitations.delete(invitation.roomId);\n        }\n      }\n      \n      // Remover invitación\n      this.invitationCodes.delete(code);\n    }\n  }\n\n  // Limpiar todas las invitaciones expiradas\n  cleanupAllExpiredInvitations() {\n    const now = new Date();\n    const expiredCodes = [];\n    \n    for (const [code, invitation] of this.invitationCodes) {\n      if (now > invitation.expiresAt) {\n        expiredCodes.push(code);\n      }\n    }\n    \n    expiredCodes.forEach(code => this.cleanupExpiredInvitation(code));\n  }\n\n  // Sistema de configuración de mazos temáticos\n  getDeckConfigurations() {\n    return this.deckConfigurationService.getAllDefaultConfigurations();\n  }\n\n  getEnabledDeckConfigurations() {\n    return this.deckConfigurationService.getEnabledConfigurations();\n  }\n\n  getDeckConfiguration(deckType) {\n    return this.deckConfigurationService.getDefaultConfiguration(deckType);\n  }\n\n  createRoomDeckConfiguration(roomId, deckType, customizations = {}) {\n    return this.deckConfigurationService.createRoomConfiguration(roomId, deckType, customizations);\n  }\n\n  getRoomDeckConfiguration(roomId) {\n    return this.deckConfigurationService.getRoomConfiguration(roomId);\n  }\n\n  updateRoomDeckConfiguration(roomId, updates) {\n    return this.deckConfigurationService.updateRoomConfiguration(roomId, updates);\n  }\n\n  modifyDeckCard(roomId, cardId, modifications) {\n    return this.deckConfigurationService.modifyCard(roomId, cardId, modifications);\n  }\n\n  addDeckCustomRule(roomId, rule) {\n    return this.deckConfigurationService.addCustomRule(roomId, rule);\n  }\n\n  removeDeckCustomRule(roomId, ruleId) {\n    return this.deckConfigurationService.removeCustomRule(roomId, ruleId);\n  }\n\n  getConfiguredDeck(roomId) {\n    return this.deckConfigurationService.getConfiguredDeck(roomId);\n  }\n\n  validateDeckConfiguration(configuration) {\n    return this.deckConfigurationService.validateConfiguration(configuration);\n  }\n\n  getDeckConfigurationStats() {\n    return this.deckConfigurationService.getConfigurationStats();\n  }\n\n  exportDeckConfiguration(roomId) {\n    return this.deckConfigurationService.exportConfiguration(roomId);\n  }\n\n  importDeckConfiguration(roomId, importedConfig) {\n    return this.deckConfigurationService.importConfiguration(roomId, importedConfig);\n  }\n\n  // Sistema de chat básico en lobby\n  createChatRoom(roomId, options = {}) {\n    return this.chatService.createChatRoom(roomId, options);\n  }\n\n  joinChatRoom(roomId, userId, userInfo = {}) {\n    return this.chatService.joinChatRoom(roomId, userId, userInfo);\n  }\n\n  leaveChatRoom(roomId, userId) {\n    return this.chatService.leaveChatRoom(roomId, userId);\n  }\n\n  sendChatMessage(roomId, userId, messageData) {\n    return this.chatService.sendMessage(roomId, userId, messageData);\n  }\n\n  getChatMessages(roomId, options = {}) {\n    return this.chatService.getMessages(roomId, options);\n  }\n\n  editChatMessage(roomId, messageId, userId, newContent) {\n    return this.chatService.editMessage(roomId, messageId, userId, newContent);\n  }\n\n  deleteChatMessage(roomId, messageId, userId, isModerator = false) {\n    return this.chatService.deleteMessage(roomId, messageId, userId, isModerator);\n  }\n\n  getChatRoomUsers(roomId) {\n    return this.chatService.getRoomUsers(roomId);\n  }\n\n  getUserChatRooms(userId) {\n    return this.chatService.getUserChatRooms(userId);\n  }\n\n  searchChatMessages(roomId, query, options = {}) {\n    return this.chatService.searchMessages(roomId, query, options);\n  }\n\n  updateChatRoomSettings(roomId, settings, userId) {\n    return this.chatService.updateRoomSettings(roomId, settings, userId);\n  }\n\n  addChatModerator(roomId, userId, addedBy) {\n    return this.chatService.addModerator(roomId, userId, addedBy);\n  }\n\n  removeChatModerator(roomId, userId, removedBy) {\n    return this.chatService.removeModerator(roomId, userId, removedBy);\n  }\n\n  getChatStats() {\n    return this.chatService.getChatStats();\n  }\n\n  // Obtener información de validación\n  getValidationInfo(socket) {\n    try {\n      const playerInfo = this.playerSockets.get(socket.id);\n      \n      if (!playerInfo) {\n        throw new Error('Jugador no encontrado');\n      }\n\n      const { playerId, roomId } = playerInfo;\n      const game = this.games.get(roomId);\n      \n      if (!game) {\n        throw new Error('Juego no encontrado');\n      }\n\n      const validationInfo = this.validationService.getValidationInfo(game, playerId);\n      const validationStats = this.validationService.getValidationStats(game);\n      \n      socket.emit('validationInfo', {\n        playerInfo: validationInfo,\n        gameStats: validationStats\n      });\n    } catch (error) {\n      socket.emit('error', { message: error.message });\n    }\n  }\n\n  // Limpiar juegos antiguos y jugadores desconectados\n  cleanupOldGames() {\n    const now = new Date();\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n    \n    // Limpiar jugadores desconectados permanentemente\n    for (const [playerId, disconnectData] of this.disconnectedPlayers) {\n      if (disconnectData.disconnectedAt < fiveMinutesAgo) {\n        const game = this.games.get(disconnectData.roomId);\n        if (game) {\n          const player = game.getPlayer(playerId);\n          if (player && player.isDisconnected) {\n            console.log(`🧹 Removiendo jugador desconectado permanentemente: ${player.name}`);\n            game.removePlayer(playerId);\n            \n            // Notificar a otros jugadores\n            this.io.to(disconnectData.roomId).emit('playerRemoved', {\n              playerId,\n              playerName: player.name,\n              message: 'Jugador removido por desconexión prolongada'\n            });\n            \n            // Si el juego terminó, limpiar\n            if (game.gameState === 'finished') {\n              this.games.delete(disconnectData.roomId);\n            }\n          }\n        }\n        \n        // Limpiar datos de desconexión\n        this.disconnectedPlayers.delete(playerId);\n        this.playerTimeouts.delete(playerId);\n        this.playerReconnectionTokens.delete(playerId);\n      }\n    }\n    \n    // Limpiar juegos terminados hace más de 1 hora\n    for (const [roomId, game] of this.games) {\n      if (game.gameState === 'finished' && game.endTime && game.endTime < oneHourAgo) {\n        this.games.delete(roomId);\n        console.log(`🧹 Juego terminado limpiado: ${roomId}`);\n      }\n      \n      // Limpiar salas vacías en espera\n      if (game.gameState === 'waiting' && game.players.length === 0) {\n        this.games.delete(roomId);\n        console.log(`🧹 Sala vacía limpiada: ${roomId}`);\n      }\n      \n      // Validar estado de juegos activos\n      if (game.gameState === 'playing') {\n        this.validateGameState(roomId);\n      }\n    }\n  }\n}\n\nmodule.exports = GameService;\n"],"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","ignoreList":[]}