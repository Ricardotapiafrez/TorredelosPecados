const io = require('socket.io-client');

console.log('ü§ñ Probando modo bot...\n');

// Crear cliente de socket
const client = io('http://localhost:5001');

let roomId = null;
let playerId = null;

// Configurar eventos para cliente
client.on('connect', () => {
  console.log('‚úÖ Cliente conectado');
  
  // Crear sala con modo bot
  client.emit('createRoom', { 
    playerName: 'Jugador Humano', 
    maxPlayers: 4, 
    deckType: 'angels',
    gameMode: 'bot',
    botCount: 2
  });
});

client.on('roomCreated', (data) => {
  console.log('üè† Sala creada con modo bot');
  console.log(`  üìã Room ID: ${data.roomId}`);
  console.log(`  üë§ Player ID: ${data.playerId}`);
  console.log(`  üéÆ Estado: ${data.gameState.gameState}`);
  console.log(`  üë• Jugadores: ${data.gameState.players.length}`);
  
  roomId = data.roomId;
  playerId = data.playerId;
  
  // Mostrar informaci√≥n de los jugadores
  data.gameState.players.forEach((player, index) => {
    console.log(`  üë§ ${index + 1}. ${player.name}${player.isBot ? ' (ü§ñ Bot)' : ' (üë§ Humano)'} - ${player.isReady ? '‚úÖ Listo' : '‚è≥ No listo'}`);
  });
  
  // Marcar como listo
  console.log('\n‚úÖ Marcando como listo...');
  client.emit('setPlayerReady', { ready: true });
});

client.on('gameStateUpdate', (data) => {
  console.log('üîÑ Estado del juego actualizado');
  console.log(`  üéÆ Estado: ${data.gameState}`);
  console.log(`  üë• Jugadores: ${data.players.length}`);
  
  const player = data.players.find(p => p.id === playerId);
  if (player) {
    console.log(`  ‚úã Cartas en mano: ${player.hand ? player.hand.length : 0}`);
    console.log(`  üìã Criaturas boca arriba: ${player.faceUpCreatures ? player.faceUpCreatures.length : 0}`);
    console.log(`  üÉè Criaturas boca abajo: ${player.faceDownCreatures ? player.faceDownCreatures.length : 0}`);
    console.log(`  üíé Pozo de almas: ${player.soulWell ? player.soulWell.length : 0}`);
  }
  
  // Mostrar estado de todos los jugadores
  data.players.forEach((player, index) => {
    console.log(`  üë§ ${index + 1}. ${player.name}${player.isBot ? ' (ü§ñ)' : ' (üë§)'} - ${player.isReady ? '‚úÖ' : '‚è≥'}`);
  });
});

client.on('allPlayersReady', () => {
  console.log('‚úÖ Todos los jugadores est√°n listos');
  
  // Iniciar juego
  client.emit('startGame');
});

client.on('gameStarted', (data) => {
  console.log('üéÆ Juego iniciado');
  console.log(`  üéØ Estado: ${data.gameState}`);
  console.log(`  üë§ Jugador actual: ${data.currentPlayerId}`);
  
  const player = data.players.find(p => p.id === playerId);
  if (player) {
    console.log(`  ‚úã Cartas en mano: ${player.hand ? player.hand.length : 0}`);
    console.log(`  üìã Criaturas boca arriba: ${player.faceUpCreatures ? player.faceUpCreatures.length : 0}`);
    console.log(`  üÉè Criaturas boca abajo: ${player.faceDownCreatures ? player.faceDownCreatures.length : 0}`);
    console.log(`  üíé Pozo de almas: ${player.soulWell ? player.soulWell.length : 0}`);
    
    if (player.hand && player.hand.length > 0) {
      console.log(`  üìù Cartas en mano: ${player.hand.map(c => c.name).join(', ')}`);
    }
  }
  
  // Mostrar informaci√≥n de todos los jugadores
  console.log('\nüìä Estado de todos los jugadores:');
  data.players.forEach((player, index) => {
    console.log(`  üë§ ${index + 1}. ${player.name}${player.isBot ? ' (ü§ñ Bot)' : ' (üë§ Humano)'}`);
    console.log(`     ‚úã Mano: ${player.handSize || 0} cartas`);
    console.log(`     üìã Boca arriba: ${player.faceUpCreatures ? player.faceUpCreatures.length : 0} cartas`);
    console.log(`     üÉè Boca abajo: ${player.faceDownCreatures ? player.faceDownCreatures.length : 0} cartas`);
    console.log(`     üíé Pozo: ${player.soulWellSize || 0} cartas`);
  });
  
  // Terminar prueba
  setTimeout(() => {
    console.log('\nüß™ Prueba completada');
    process.exit(0);
  }, 2000);
});

client.on('error', (data) => {
  console.error('‚ùå Error:', data.message);
});

// Manejar desconexi√≥n
process.on('SIGINT', () => {
  console.log('\nüõë Cerrando conexi√≥n...');
  client.disconnect();
  process.exit(0);
});

// Timeout de seguridad
setTimeout(() => {
  console.log('‚è∞ Timeout de seguridad alcanzado');
  process.exit(1);
}, 10000);
