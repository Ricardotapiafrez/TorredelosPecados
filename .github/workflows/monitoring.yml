name: Monitoring & Alerts

on:
  schedule:
    # Ejecutar cada hora en lugar de cada 5 minutos
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      check_type:
        description: 'Type of check to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - health
          - performance
          - security

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'health'
    continue-on-error: true  # No fallar el workflow si este job falla
    
    steps:
      - name: Check backend health
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          
          # URLs de ejemplo - ajustar según tu configuración real
          if [ "$ENVIRONMENT" = "production" ]; then
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          else
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          fi
          
          echo "Checking health for $ENVIRONMENT environment..."
          echo "Note: Using localhost URLs for development. Update with real URLs when deployed."
          
          # Backend health check - no fallar si no está disponible
          if curl -f --connect-timeout 10 "$BACKEND_URL/health" > /dev/null 2>&1; then
            echo "✅ Backend is healthy"
          else
            echo "⚠️ Backend health check failed (service may not be running)"
            # No exit 1 - solo warning
          fi
          
          # Frontend health check - no fallar si no está disponible
          if curl -f --connect-timeout 10 "$FRONTEND_URL" > /dev/null 2>&1; then
            echo "✅ Frontend is healthy"
          else
            echo "⚠️ Frontend health check failed (service may not be running)"
            # No exit 1 - solo warning
          fi
          
          # Database connectivity (si hay endpoint) - opcional
          if curl -f --connect-timeout 5 "$BACKEND_URL/health/db" > /dev/null 2>&1; then
            echo "✅ Database is healthy"
          else
            echo "ℹ️ Database health check not available (normal for development)"
          fi
          
          # Redis connectivity (si hay endpoint) - opcional
          if curl -f --connect-timeout 5 "$BACKEND_URL/health/redis" > /dev/null 2>&1; then
            echo "✅ Redis is healthy"
          else
            echo "ℹ️ Redis health check not available (normal for development)"
          fi

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance'
    continue-on-error: true  # No fallar el workflow si este job falla
    
    steps:
      - name: Check response times
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          
          # URLs de ejemplo - ajustar según tu configuración real
          if [ "$ENVIRONMENT" = "production" ]; then
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          else
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          fi
          
          echo "Checking performance for $ENVIRONMENT environment..."
          echo "Note: Using localhost URLs for development. Update with real URLs when deployed."
          
          # Backend response time - no fallar si no está disponible
          if BACKEND_TIME=$(curl -w "%{time_total}" -o /dev/null -s --connect-timeout 10 "$BACKEND_URL/health" 2>/dev/null); then
            echo "Backend response time: ${BACKEND_TIME}s"
            
            if (( $(echo "$BACKEND_TIME > 2.0" | bc -l 2>/dev/null || echo "0") )); then
              echo "⚠️ Backend response time is slow (>2s)"
            else
              echo "✅ Backend response time is acceptable"
            fi
          else
            echo "ℹ️ Backend not available for performance check"
          fi
          
          # Frontend response time - no fallar si no está disponible
          if FRONTEND_TIME=$(curl -w "%{time_total}" -o /dev/null -s --connect-timeout 10 "$FRONTEND_URL" 2>/dev/null); then
            echo "Frontend response time: ${FRONTEND_TIME}s"
            
            if (( $(echo "$FRONTEND_TIME > 3.0" | bc -l 2>/dev/null || echo "0") )); then
              echo "⚠️ Frontend response time is slow (>3s)"
            else
              echo "✅ Frontend response time is acceptable"
            fi
          else
            echo "ℹ️ Frontend not available for performance check"
          fi
          
          # API endpoints performance - no fallar si no está disponible
          if API_TIME=$(curl -w "%{time_total}" -o /dev/null -s --connect-timeout 10 "$BACKEND_URL/api/games" 2>/dev/null); then
            echo "API response time: ${API_TIME}s"
            
            if (( $(echo "$API_TIME > 1.0" | bc -l 2>/dev/null || echo "0") )); then
              echo "⚠️ API response time is slow (>1s)"
            else
              echo "✅ API response time is acceptable"
            fi
          else
            echo "ℹ️ API not available for performance check"
          fi

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security'
    continue-on-error: true  # No fallar el workflow si este job falla
    
    steps:
      - name: Check security headers
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          
          # URLs de ejemplo - ajustar según tu configuración real
          if [ "$ENVIRONMENT" = "production" ]; then
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          else
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          fi
          
          echo "Checking security for $ENVIRONMENT environment..."
          echo "Note: Using localhost URLs for development. Update with real URLs when deployed."
          
          # Check security headers - no fallar si no están disponibles
          if BACKEND_HEADERS=$(curl -I --connect-timeout 10 "$BACKEND_URL" 2>/dev/null); then
            # Check for HTTPS (solo si es producción)
            if [ "$ENVIRONMENT" = "production" ]; then
              if [[ "$BACKEND_URL" == https://* ]]; then
                echo "✅ Backend uses HTTPS"
              else
                echo "⚠️ Backend should use HTTPS in production"
              fi
            else
              echo "ℹ️ Backend using HTTP (acceptable for development)"
            fi
            
            # Check for security headers
            if echo "$BACKEND_HEADERS" | grep -q "X-Frame-Options"; then
              echo "✅ Backend has X-Frame-Options header"
            else
              echo "ℹ️ Backend missing X-Frame-Options header (consider adding)"
            fi
          else
            echo "ℹ️ Backend not available for security check"
          fi
          
          if FRONTEND_HEADERS=$(curl -I --connect-timeout 10 "$FRONTEND_URL" 2>/dev/null); then
            # Check for HTTPS (solo si es producción)
            if [ "$ENVIRONMENT" = "production" ]; then
              if [[ "$FRONTEND_URL" == https://* ]]; then
                echo "✅ Frontend uses HTTPS"
              else
                echo "⚠️ Frontend should use HTTPS in production"
              fi
            else
              echo "ℹ️ Frontend using HTTP (acceptable for development)"
            fi
            
            # Check for security headers
            if echo "$FRONTEND_HEADERS" | grep -q "X-Frame-Options"; then
              echo "✅ Frontend has X-Frame-Options header"
            else
              echo "ℹ️ Frontend missing X-Frame-Options header (consider adding)"
            fi
            
            # Check for Content Security Policy
            if echo "$FRONTEND_HEADERS" | grep -q "Content-Security-Policy"; then
              echo "✅ Frontend has CSP header"
            else
              echo "ℹ️ Frontend missing CSP header (consider adding)"
            fi
          else
            echo "ℹ️ Frontend not available for security check"
          fi

  uptime-check:
    name: Uptime Check
    runs-on: ubuntu-latest
    continue-on-error: true  # No fallar el workflow si este job falla
    
    steps:
      - name: Check uptime
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          
          # URLs de ejemplo - ajustar según tu configuración real
          if [ "$ENVIRONMENT" = "production" ]; then
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          else
            BACKEND_URL="http://localhost:3001"  # Cambiar por URL real cuando esté disponible
            FRONTEND_URL="http://localhost:3000"  # Cambiar por URL real cuando esté disponible
          fi
          
          echo "Checking uptime for $ENVIRONMENT environment..."
          echo "Note: Using localhost URLs for development. Update with real URLs when deployed."
          
          # Check if services are responding - no fallar si no están disponibles
          if BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 "$BACKEND_URL/health" 2>/dev/null); then
            if [ "$BACKEND_STATUS" = "200" ]; then
              echo "✅ Backend is responding (HTTP $BACKEND_STATUS)"
            else
              echo "⚠️ Backend is responding but with status $BACKEND_STATUS"
            fi
          else
            echo "ℹ️ Backend is not responding (service may not be running)"
            # No exit 1 - solo información
          fi
          
          if FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 "$FRONTEND_URL" 2>/dev/null); then
            if [ "$FRONTEND_STATUS" = "200" ]; then
              echo "✅ Frontend is responding (HTTP $FRONTEND_STATUS)"
            else
              echo "⚠️ Frontend is responding but with status $FRONTEND_STATUS"
            fi
          else
            echo "ℹ️ Frontend is not responding (service may not be running)"
            # No exit 1 - solo información
          fi
          
          # Check SSL certificate expiration - solo si es producción y HTTPS
          if [ "$ENVIRONMENT" = "production" ] && [[ "$BACKEND_URL" == https://* ]]; then
            if BACKEND_SSL=$(echo | openssl s_client -servername $(echo $BACKEND_URL | sed 's|https://||' | sed 's|/.*||') -connect $(echo $BACKEND_URL | sed 's|https://||' | sed 's|/.*||'):443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null); then
              echo "Backend SSL: $BACKEND_SSL"
            else
              echo "ℹ️ Could not check Backend SSL certificate"
            fi
          fi
          
          if [ "$ENVIRONMENT" = "production" ] && [[ "$FRONTEND_URL" == https://* ]]; then
            if FRONTEND_SSL=$(echo | openssl s_client -servername $(echo $FRONTEND_URL | sed 's|https://||' | sed 's|/.*||') -connect $(echo $FRONTEND_URL | sed 's|https://||' | sed 's|/.*||'):443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null); then
              echo "Frontend SSL: $FRONTEND_SSL"
            else
              echo "ℹ️ Could not check Frontend SSL certificate"
            fi
          fi

  alert:
    name: Send Alerts
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-check, uptime-check]
    if: always() && github.event_name == 'workflow_dispatch'  # Solo enviar alertas en ejecución manual
    
    steps:
      - name: Check for failures
        id: check-failures
        run: |
          if [ "${{ needs.health-check.result }}" = "failure" ] || \
             [ "${{ needs.performance-check.result }}" = "failure" ] || \
             [ "${{ needs.security-check.result }}" = "failure" ] || \
             [ "${{ needs.uptime-check.result }}" = "failure" ]; then
            echo "has-failures=true" >> $GITHUB_OUTPUT
            echo "❌ Some checks failed - sending alert"
          else
            echo "has-failures=false" >> $GITHUB_OUTPUT
            echo "✅ All checks passed or were skipped"
          fi
          
      - name: Send Slack alert (if failures)
        if: steps.check-failures.outputs.has-failures == 'true' && env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 Monitoring alert: Some health checks failed for Torre de los Pecados"
          channel: '#alerts'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Send Discord alert (if failures)
        if: steps.check-failures.outputs.has-failures == 'true' && env.DISCORD_WEBHOOK != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🚨 **Monitoring Alert**
            Some health checks failed for Torre de los Pecados
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Check: ${{ github.event.inputs.check_type || 'all' }}
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  generate-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-check, uptime-check]
    if: always() && github.event_name == 'workflow_dispatch'  # Solo generar reportes en ejecución manual
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate monitoring report
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          cat > monitoring-report.md << EOF
          # Monitoring Report - Torre de los Pecados
          
          **Environment**: $ENVIRONMENT
          **Generated**: $TIMESTAMP
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          
          ## Health Check Results
          
          - **Backend Health**: ${{ needs.health-check.result }}
          - **Performance Check**: ${{ needs.performance-check.result }}
          - **Security Check**: ${{ needs.security-check.result }}
          - **Uptime Check**: ${{ needs.uptime-check.result }}
          
          ## Summary
          
          EOF
          
          if [ "${{ needs.health-check.result }}" = "success" ] && \
             [ "${{ needs.performance-check.result }}" = "success" ] && \
             [ "${{ needs.security-check.result }}" = "success" ] && \
             [ "${{ needs.uptime-check.result }}" = "success" ]; then
            echo "✅ All systems operational" >> monitoring-report.md
          else
            echo "⚠️ Some systems have issues or are not running (normal for development)" >> monitoring-report.md
          fi
          
          echo "" >> monitoring-report.md
          echo "## Notes" >> monitoring-report.md
          echo "- This is a development environment" >> monitoring-report.md
          echo "- Services may not be running continuously" >> monitoring-report.md
          echo "- Update URLs in workflow when deploying to production" >> monitoring-report.md
          
      - name: Upload monitoring report
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-report-${{ github.event.inputs.environment || 'production' }}
          path: monitoring-report.md
          retention-days: 30
