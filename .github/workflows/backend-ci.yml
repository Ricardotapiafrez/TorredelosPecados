name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
          
      - name: Install dependencies
        working-directory: api
        run: npm ci
        
      - name: Run linting
        working-directory: api
        run: npm run lint
        
      - name: Run unit tests
        working-directory: api
        run: npm test
        
      - name: Run tests with coverage
        working-directory: api
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: api/coverage
          flags: backend
          name: backend-coverage
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-backend-${{ matrix.node-version }}
          path: api/coverage/
          retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
          
      - name: Install dependencies
        working-directory: api
        run: npm ci
        
      - name: Run integration tests
        working-directory: api
        run: npm run test:integration
        
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: api/test-results/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
          
      - name: Install dependencies
        working-directory: api
        run: npm ci
        
      - name: Run security audit
        working-directory: api
        run: npm audit --audit-level=moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          working-directory: api

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, integration-test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
          
      - name: Install dependencies
        working-directory: api
        run: npm ci
        
      - name: Build application
        working-directory: api
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: api/dist/
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: api/dist/
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Aquí irían los comandos de despliegue a staging
          # Por ejemplo: rsync, docker push, etc.
          
      - name: Notify deployment
        run: |
          echo "Backend deployed to staging successfully!"
          # Aquí se podría enviar notificación a Slack/Discord

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: api/dist/
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Aquí irían los comandos de despliegue a producción
          # Por ejemplo: rsync, docker push, etc.
          
      - name: Notify deployment
        run: |
          echo "Backend deployed to production successfully!"
          # Aquí se podría enviar notificación a Slack/Discord
