name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'web/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'web/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
          
      - name: Install dependencies
        working-directory: web
        run: npm ci
        
      - name: Run linting
        working-directory: web
        run: npm run lint
        
      - name: Type check
        working-directory: web
        run: npx tsc --noEmit
        
      - name: Install Playwright browsers
        working-directory: web
        run: npm run test:e2e:install
        
      - name: Run E2E tests
        working-directory: web
        run: npm run test:e2e
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-frontend-${{ matrix.node-version }}
          path: web/test-results/
          retention-days: 30
          
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: screenshots-${{ matrix.node-version }}
          path: web/test-results/screenshots/
          retention-days: 30

  e2e-tests:
    name: E2E Tests (Multiple Browsers)
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
          
      - name: Install dependencies
        working-directory: web
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: web
        run: npm run test:e2e:install
        
      - name: Run E2E tests on Chromium
        working-directory: web
        run: npx playwright test --project=chromium
        
      - name: Run E2E tests on Firefox
        working-directory: web
        run: npx playwright test --project=firefox
        
      - name: Run E2E tests on WebKit
        working-directory: web
        run: npx playwright test --project=webkit
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: web/test-results/
          retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
          
      - name: Install dependencies
        working-directory: web
        run: npm ci
        
      - name: Build application
        working-directory: web
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: web/.next/
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: web/.next/
          
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: web
          vercel-args: '--prod'
          
      - name: Notify deployment
        run: |
          echo "Frontend deployed to staging successfully!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: web/.next/
          
      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: web
          vercel-args: '--prod'
          
      - name: Notify deployment
        run: |
          echo "Frontend deployed to production successfully!"

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://staging.torredelospecados.com
          uploadArtifacts: true
          temporaryPublicStorage: true
